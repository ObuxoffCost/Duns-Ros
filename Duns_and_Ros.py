#!/usr/bin/env python
# coding: utf-8

# In[1]:


import math

# In[2]:


def define_fp(d:float, q_l: float, q_g: float, ro_l: float, sigm: float, mu_o: float):
    """
    Функция, определяющая структуру потока
    return:
    flow - 'Пузырьковый поток', 'Пробковый поток', 'Эмульсионный поток', 'Переходный поток'
    """
    Ap = 3.14*d**2/4
    v_sl = q_l/Ap
    v_sg = q_g/Ap
    N_lv = v_sl*pow((ro_l/(9.8*sigm)),1/4)
    N_gv = v_sg*pow((ro_l/(9.8*sigm)),1/4)
    N_d = d*math.sqrt((ro_l*9.8)/sigm)
    N_l = mu_o*pow((9.8/(ro_l*sigm)),1/4)
    #Определение показателей L1 и L2
    x = [10, 10.36648685, 10.73595609, 11.11859349, 11.51486837, 11.92526677, 12.35029208, 12.7904656, 13.24632723, 13.71843611, 14.2073713, 14.71373249, 15.23814077, 15.77356534, 16.33574684, 16.91796492, 17.52093367, 18.14539267, 18.79210786, 19.46187245, 20.15550794, 20.87386512, 21.60731287, 22.37741344, 23.17496097, 24.00093368, 24.85634467, 25.74224313, 26.64675172, 27.56962921, 28.51059869, 29.41206789, 30.25362053, 31.01347893, 31.76150995, 32.51176579, 33.19890697, 33.83467909, 34.44909858, 35.10881235, 35.79856785, 36.46638318, 37.09249237, 37.7110047, 38.26531023, 38.79001063, 39.3793254, 40.05544832, 40.80267493, 41.54362946, 42.27747085, 43.00335344, 43.72042859, 44.44946086, 45.16867457, 45.94419767, 46.77851947, 47.6048318, 48.37510094, 49.13392918, 49.90466067, 50.6874821, 51.5577603, 52.54511168, 53.57742457, 54.6831877, 55.78463238, 56.99136265, 58.42277366, 60.03596439, 61.75374311, 63.61342748, 65.65673111, 67.93067128, 70.31756023, 72.75292248, 75.34589032, 78.03127345, 80.81236561, 83.69257796, 86.67544319, 89.76461994, 92.96389723, 96.27719913, 99.70858955, 103.2622773, 106.942621, 110.7541349, 114.701494, 118.7895399, 123.0232868, 127.4079275, 131.94884, 136.6515941, 141.5219577, 146.5659047, 151.7896217, 157.1995158, 162.8022226, 168.6046139, 174.6138067, 180.8371717, 187.2823419, 193.9572228, 200.8700013, 208.0291564, 215.443469, 223.1220332, 231.0742671, 239.3099245, 247.8391068, 256.6722754, 265.8202647, 275.2942951, 285.1059869, 295.2673747]
    y = [2.066, 2.064, 2.063, 2.062, 2.063, 2.063, 2.062, 2.061, 2.061, 2.061, 2.061, 2.061, 2.06, 2.058, 2.057, 2.057, 2.056, 2.055, 2.055, 2.056, 2.056, 2.054, 2.053, 2.053, 2.053, 2.054, 2.053, 2.05, 2.045, 2.039, 2.03, 2.017, 2, 1.979, 1.959, 1.937, 1.914, 1.89, 1.864, 1.84, 1.816, 1.791, 1.765, 1.739, 1.713, 1.685, 1.659, 1.633, 1.609, 1.584, 1.559, 1.533, 1.507, 1.482, 1.456, 1.431, 1.406, 1.38, 1.355, 1.329, 1.303, 1.276, 1.251, 1.227, 1.202, 1.179, 1.155, 1.131, 1.113, 1.097, 1.081, 1.066, 1.056, 1.049, 1.042, 1.038, 1.035, 1.034, 1.033, 1.033, 1.032, 1.032, 1.032, 1.032, 1.032, 1.032, 1.031, 1.03, 1.03, 1.03, 1.03, 1.03, 1.029, 1.029, 1.029, 1.028, 1.028, 1.027, 1.027, 1.027, 1.027, 1.027, 1.026, 1.026, 1.025, 1.025, 1.025, 1.025, 1.023, 1.021, 1.021, 1.021, 1.021, 1.02, 1.018, 1.016]
    c = []
    for i in range(len(x)):
        c.append(abs(x[i]-N_d))
    L1 = y[c.index(min(c))]

    x = [15.20852269, 15.674142, 16.17760538, 16.71349107, 17.250339, 17.78711934, 18.33168415, 18.92050947, 19.54725428, 20.19476012, 20.85356918, 21.50247156, 22.16078442, 22.83925197, 23.52704509, 24.24734165, 25.00184835, 25.7798331, 26.58202647, 27.42251665, 28.28958207, 29.16987152, 30.07755302, 31.01347893, 31.97852813, 32.97360685, 33.96659121, 34.97246432, 36.02564332, 37.11053829, 38.17236338, 39.24547656, 40.38802724, 41.56384091, 42.77388596, 44.06200103, 45.41098929, 46.80127775, 48.21067579, 49.66251719, 51.15808008, 52.72431965, 54.41785823, 56.19311964, 57.99807827, 64.45434777, 66.68664486, 69.0634061, 71.4900961, 74.00205303, 76.63954081, 79.37103059, 82.19987269, 85.12953681, 88.16361631, 91.30583266, 94.5600399, 97.9302295, 101.4205351, 105.0352379, 108.7787712, 112.6557269, 116.6708601, 120.8290957, 125.1355338, 129.5954566, 134.2143343, 138.9978322, 143.9518175, 149.0098715, 154.3206933, 159.8207966, 165.5169278, 171.4160732, 177.5254685, 183.8526072, 190.4052498, 197.1914334, 204.2194816, 211.4980146, 219.0359599, 226.8425631, 234.9273995, 243.3003854, 251.9717906, 260.9522512, 270.2527819, 279.8847905, 289.860091, 300.1909185]
    y = [0.476, 0.491, 0.503, 0.514, 0.525, 0.539, 0.553, 0.565, 0.576, 0.587, 0.599, 0.612, 0.627, 0.643, 0.658, 0.673, 0.688, 0.702, 0.716, 0.729, 0.743, 0.757, 0.772, 0.786, 0.8, 0.814, 0.83, 0.846, 0.861, 0.877, 0.894, 0.911, 0.928, 0.945, 0.962, 0.978, 0.993, 1.007, 1.023, 1.038, 1.054, 1.068, 1.082, 1.096, 1.103, 1.118, 1.123, 1.127, 1.131, 1.135, 1.137, 1.138, 1.138, 1.139, 1.139, 1.138, 1.138, 1.138, 1.138, 1.137, 1.136, 1.135, 1.135, 1.134, 1.133, 1.133, 1.132, 1.132, 1.131, 1.129, 1.129, 1.129, 1.129, 1.129, 1.127, 1.126, 1.126, 1.126, 1.126, 1.126, 1.126, 1.125, 1.125, 1.127, 1.128, 1.128, 1.128, 1.127, 1.128, 1.131]
    c = []
    for i in range(len(x)):
        c.append(abs(x[i]-N_d))
    L2 = y[c.index(min(c))]
    
    #Расчет граничных областей
    N_gv_BS = L1+L2*N_lv #Граница пузырькового и пробкового режимов
    N_gv_STr = 50+36*N_lv #Граница пробкового и переходного режимов
    N_gv_TrM = 75+84*(N_lv**0.75) #Граница переходного и эмульсионного режимов
    
    if N_gv < N_gv_BS:
        flow = 'Пузырьковый поток'
    elif N_gv_BS <= N_gv < N_gv_STr:
        flow = 'Пробковый поток'
    elif N_gv > N_gv_TrM:
        flow = 'Эмульсионный поток'
    elif N_gv_STr<=N_gv<=N_gv_TrM:
        flow = 'Переходный поток'
    return flow, v_sl, v_sg, N_lv, N_gv, N_d, N_l


# In[3]:


def calc_grad_grav(N_gv: float, N_d: float, N_lv: float, N_l: float, ro_l: float, ro_g: float, v_sg: float, v_sl: float, sigm: float, q_l: float, q_g: float, mu_o: float, mu_g: float, d: float, eps: float, surch: float, p_wf: float, p_wh: float, flow: str):
    """
    Функция, вычисляющая градиент давления на гравитацию
    return:
    grad_grav - в для любого потока кроме переходного
    
    или
    
    grad_grav1 - градиент давления на гравитацию пробкового режима для расчета переходного потока 
    grad_grav1 - градиент давления на гравитацию эмульсионного режима для расчета переходного потока
    
    """

    if flow == 'Пузырьковый поток':
        #Находим по графикам параметры  характеризующие скорость проскальзывания для пузырькового потока
        x = [0.004435075, 0.00477996, 0.005604433, 0.006695458, 0.00735243, 0.008057217, 0.008665781, 0.00946673, 0.010792223, 0.011962817, 0.013881198, 0.015693718, 0.017396179, 0.020082053, 0.021554247, 0.02306317, 0.02470356, 0.026487742, 0.028283147, 0.030107306, 0.03208287, 0.034223532, 0.036507255, 0.03866186, 0.040732038, 0.042957449, 0.04558703, 0.048327289, 0.051020383, 0.05391994, 0.057102396, 0.060660896, 0.0645076, 0.068455482, 0.072644518, 0.077250413, 0.082404784, 0.088085548, 0.094450381, 0.101483122, 0.108810208, 0.116424991, 0.124702692, 0.133844519, 0.144102719, 0.15514567, 0.167036447, 0.179839131, 0.193819686, 0.208231114, 0.223247847, 0.239595823, 0.256872018, 0.27567962, 0.295860549, 0.317183763, 0.339332942, 0.3615149, 0.384745316, 0.410751919, 0.435780325, 0.474497379, 0.511276634, 0.556087507, 0.595484216, 0.62847837, 0.659849988, 0.691341525, 0.725094282, 0.762878612, 0.80346958, 0.84533535, 0.8884553, 0.935722018, 0.985506474, 1.035779711, 1.087485924, 1.145344876, 1.210074563, 1.282465649, 1.356346143, 1.431493073, 1.510808193, 1.601185227, 1.702287615, 1.817352614]
        y = [1.25, 1.25, 1.25, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.27, 1.27, 1.27, 1.28, 1.29, 1.29, 1.31, 1.32, 1.34, 1.35, 1.37, 1.4, 1.43, 1.46, 1.49, 1.54, 1.58, 1.61, 1.65, 1.69, 1.74, 1.78, 1.82, 1.86, 1.9, 1.94, 1.98, 2.02, 2.05, 2.08, 2.1, 2.11, 2.13, 2.15, 2.16, 2.16, 2.16, 2.16, 2.16, 2.16, 2.14, 2.12, 2.11, 2.09, 2.07, 2.04, 2.01, 1.98, 1.94, 1.89, 1.86, 1.82, 1.77, 1.7, 1.63, 1.58, 1.54, 1.5, 1.45, 1.41, 1.37, 1.33, 1.29, 1.26, 1.22, 1.19, 1.15, 1.12, 1.09, 1.06, 1.04, 1.01, 0.99, 0.96, 0.94, 0.92, 0.9]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F1 = y[c.index(min(c))]
        
        x = [0.002165797, 0.002458816, 0.003107081, 0.003853445, 0.004603601, 0.005603561, 0.007014967, 0.008763709, 0.009445142, 0.010179528, 0.010970946, 0.011836271, 0.012730348, 0.013663898, 0.014666185, 0.015709529, 0.016827255, 0.017987337, 0.01910821, 0.020173164, 0.021143384, 0.022022762, 0.0228674, 0.023769064, 0.024757647, 0.025787427, 0.026720981, 0.027487661, 0.028305673, 0.029330208, 0.030486606, 0.031820498, 0.033247312, 0.034594218, 0.035846481, 0.037144074, 0.038528567, 0.040047754, 0.04180011, 0.043765206, 0.045632742, 0.047432047, 0.049251206, 0.051299459, 0.053599362, 0.0560022, 0.058634223, 0.061389948, 0.064142439, 0.066879717, 0.069878788, 0.073163912, 0.076682944, 0.08028769, 0.084235863, 0.088746056, 0.093595025, 0.098914156, 0.104969379, 0.111857903, 0.119569838, 0.128077179, 0.137328679, 0.146940174, 0.157057971, 0.168395444, 0.181116679, 0.194999171, 0.209941123, 0.226025168, 0.243595425, 0.262259449, 0.282643739, 0.304294817, 0.326582832, 0.349407047, 0.372657168, 0.397866713, 0.425220969, 0.454930214, 0.486710582, 0.517994038, 0.550730792, 0.591678419, 0.631690418, 0.69076308, 0.735178259, 0.783263462, 0.836249738, 0.890036328, 0.948250206, 1.011306966, 1.079672383, 1.156275903, 1.239630341, 1.323468141, 1.410008953, 1.506921877, 1.623946175, 1.717612236, 1.82613504]
        y = [0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.25, 0.25, 0.25, 0.26, 0.26, 0.27, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.35, 0.36, 0.37, 0.38, 0.4, 0.41, 0.42, 0.44, 0.45, 0.47, 0.48, 0.5, 0.51, 0.53, 0.55, 0.57, 0.59, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.73, 0.75, 0.77, 0.8, 0.82, 0.84, 0.87, 0.89, 0.91, 0.94, 0.96, 0.97, 0.99, 1, 1.01, 1.01, 1.02, 1.02, 1.02, 1.02, 1.02, 1.02, 1.01, 1.01, 1, 1, 0.99, 0.98, 0.97, 0.96, 0.95, 0.93, 0.92, 0.9, 0.9, 0.88, 0.88, 0.87, 0.85, 0.84, 0.83, 0.82, 0.81, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.7]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F2 = y[c.index(min(c))]
        
        x = [0.001996768, 0.002172274, 0.002363198, 0.002619485, 0.002903566, 0.00318847, 0.003404378, 0.003597412, 0.003865176, 0.004148659, 0.00444836, 0.004774691, 0.005119713, 0.005466981, 0.005813678, 0.0061632, 0.00652024, 0.006876519, 0.00720722, 0.007522561, 0.007843561, 0.008195262, 0.008580563, 0.008984007, 0.009260961, 0.009736604, 0.010151921, 0.010563193, 0.011105718, 0.011676143, 0.012225021, 0.012746723, 0.013290648, 0.013915377, 0.014614908, 0.015349604, 0.01613801, 0.016949326, 0.017838441, 0.018793614, 0.019841034, 0.020990314, 0.022206165, 0.02344385, 0.024699246, 0.026075886, 0.027614934, 0.029335931, 0.031196315, 0.033243651, 0.035352183, 0.037477575, 0.039812972, 0.042425397, 0.045302949, 0.048425859, 0.051710562, 0.055104023, 0.058720361, 0.062638748, 0.066956683, 0.071795025, 0.076982505, 0.082544282, 0.088599701, 0.095099643, 0.101864338, 0.108882136, 0.116020129, 0.123369965, 0.131184997, 0.139638918, 0.14879183, 0.15887581, 0.169468465, 0.18095375, 0.194021062, 0.208680125, 0.22421202, 0.240152514, 0.257495589, 0.276376676, 0.296643168, 0.318724088, 0.342802803, 0.368705239, 0.396153908, 0.426522908, 0.459692044, 0.494936525, 0.532337648, 0.571962714, 0.615159349, 0.661628756, 0.713074486, 0.76852044, 0.825710409, 0.889017432, 0.958156099, 1.036989652, 1.117622015, 1.204524043, 1.292789856, 1.493909479, 1.610070185, 1.735263106, 1.870190551, 2.015609439]
        y = [0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.84, 0.84, 0.85, 0.86, 0.88, 0.89, 0.91, 0.94, 0.96, 0.99, 1.02, 1.05, 1.08, 1.12, 1.15, 1.19, 1.23, 1.27, 1.31, 1.35, 1.39, 1.43, 1.47, 1.52, 1.57, 1.62, 1.67, 1.72, 1.77, 1.82, 1.87, 1.92, 1.98, 2.03, 2.08, 2.14, 2.2, 2.26, 2.31, 2.37, 2.42, 2.47, 2.53, 2.59, 2.65, 2.7, 2.75, 2.8, 2.85, 2.91, 2.98, 3.04, 3.09, 3.14, 3.18, 3.22, 3.26, 3.31, 3.35, 3.39, 3.42, 3.46, 3.49, 3.52, 3.55, 3.59, 3.63, 3.66, 3.69, 3.71, 3.73, 3.75, 3.79, 3.81, 3.84, 3.87, 3.88, 3.91, 3.94, 3.96, 3.96, 3.99, 4.02, 4.04, 4.05, 4.06, 4.06, 4.06, 4.08, 4.1, 4.11, 4.13, 4.13, 4.13, 4.12, 4.15, 4.15, 4.15, 4.15, 4.15]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F3 = y[c.index(min(c))]
        
        x = [0.002013607, 0.002099141, 0.002206591, 0.00231713, 0.002425626, 0.002536563, 0.002649817, 0.002773891, 0.002912849, 0.003055588, 0.003198662, 0.003341478, 0.003497938, 0.003669349, 0.003861187, 0.004054613, 0.004248881, 0.004457091, 0.004690114, 0.004940455, 0.005187946, 0.005442173, 0.005714798, 0.006019833, 0.00634115, 0.006679617, 0.007028837, 0.007396314, 0.007807325, 0.008249751, 0.008699135, 0.009163463, 0.009662619, 0.010178374, 0.010743983, 0.011352823, 0.011996166, 0.012662789, 0.013394287, 0.014182785, 0.0150177, 0.015868724, 0.016785421, 0.017773549, 0.018800284, 0.01988633, 0.021078914, 0.022366267, 0.023682929, 0.025077101, 0.026636322, 0.028263082, 0.029926879, 0.031754603, 0.033764108, 0.03590078, 0.038132986, 0.04054613, 0.043201752, 0.046079204, 0.049148309, 0.052421832, 0.05602981, 0.059948425, 0.064074427, 0.068342104, 0.073045809, 0.078154489, 0.083794574, 0.089841681, 0.096525749, 0.103923038, 0.111887221, 0.120336526, 0.129558564, 0.140068818, 0.149553557, 0.158192902, 0.172096627, 0.185478119, 0.201151389, 0.216566705, 0.233405999, 0.251554644, 0.27111445, 0.290679654, 0.325233387, 0.350522134, 0.377777225, 0.407151555, 0.459834578, 0.529148094, 0.592049098, 0.668656779, 0.762278764, 0.832733185, 0.945387283, 1.041394252, 1.122368582, 1.205870895, 1.324192792, 1.440577361, 1.55259045, 1.737150311, 1.887865687]
        y = [-19.76, -18.37, -17.12, -15.85, -14.5, -13.13, -11.76, -10.44, -9.17, -7.89, -6.55, -5.18, -3.83, -2.54, -1.31, -0.06, 1.24, 2.56, 3.79, 4.99, 6.27, 7.57, 8.84, 10.05, 11.25, 12.48, 13.75, 15, 16.16, 17.29, 18.45, 19.66, 20.84, 22.02, 23.2, 24.36, 25.51, 26.67, 27.8, 28.87, 29.95, 31.06, 32.17, 33.28, 34.39, 35.5, 36.57, 37.63, 38.74, 39.85, 40.89, 41.9, 42.97, 43.98, 44.93, 45.87, 46.84, 47.81, 48.71, 49.54, 50.37, 51.24, 52, 52.54, 53.02, 53.47, 53.82, 54.06, 54.37, 54.75, 55.02, 55.18, 55.45, 55.69, 55.81, 55.9, 56.12, 56.12, 56.13, 56.13, 56.2, 56.28, 56.26, 56.24, 56.24, 56.15, 56.16, 56.16, 55.95, 55.95, 55.96, 55.97, 55.97, 55.98, 55.98, 55.87, 55.78, 55.81, 55.81, 55.79, 55.8, 55.8, 55.8, 55.81, 55.62]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F4 = y[c.index(min(c))]
        F3_i = F3-F4/N_d
        
        #Находим безразмерный показатель скорости проскализывания S для пузырькового потока
        S = F1+F2*N_lv+F3_i*(N_gv/(1+N_lv))
        #Находим скорость скольжения Vs
        vs = S/(ro_l/(9.8*sigm))**0.25
        #Находим объемное содержание жидкости для пузырькового потока
        H_l = (vs-(v_sg+v_sl)+math.sqrt((v_sg+v_sl-vs)**2+4*vs*v_sl))/(2*vs)
        #Расчитываем градиент давления на графитацию
        grad_grav = (ro_l*H_l+ro_g*(1-H_l))*9.8
        
        return grad_grav
        
    elif flow == 'Пробковый поток':
        #Находим по графикам параметры  характеризующие скорость проскальзывания для пробкового потока
        x = [0.001855336, 0.00199908, 0.002144907, 0.002298958, 0.002469265, 0.002660548, 0.00286964, 0.003091905, 0.003324439, 0.003566998, 0.003835286, 0.004128044, 0.004433807, 0.004752274, 0.005098978, 0.00548245, 0.005882443, 0.006311648, 0.006786363, 0.007304464, 0.007853888, 0.008426871, 0.009032205, 0.009691229, 0.010387386, 0.01109853, 0.011833542, 0.012657044, 0.013566268, 0.014525559, 0.015552831, 0.016670259, 0.017849094, 0.019051266, 0.020334567, 0.021727093, 0.023215091, 0.024779064, 0.026476162, 0.028289448, 0.030290459, 0.032467052, 0.034654428, 0.036757184, 0.038824265, 0.041050633, 0.043541498, 0.046231979, 0.048883142, 0.051524079, 0.054364784, 0.057301417, 0.059954194, 0.062532661, 0.065085518, 0.067529934, 0.070066485, 0.072469639, 0.074798108, 0.07663567, 0.077209552, 0.078032696, 0.081302302, 0.081397016, 0.084365753, 0.085714306, 0.086537285, 0.087368717, 0.088486894, 0.090091433, 0.091917875, 0.094077416, 0.096794564, 0.100009466, 0.103657205, 0.107663488, 0.112295041, 0.117989153, 0.125148086, 0.133299809, 0.142130868, 0.15186314, 0.162942118, 0.175009272, 0.187967129, 0.201671755, 0.215919666, 0.230443012, 0.24568225, 0.260828273, 0.27661593, 0.293050204, 0.309808179, 0.32717999, 0.345526978, 0.364902793, 0.384959834, 0.406118679, 0.429342435, 0.452940715, 0.475829022, 0.499348998, 0.526795934, 0.559271406, 0.594374011, 0.628365066, 0.660813023, 0.694936551, 0.733904745, 0.776689692, 0.821967606, 0.868972911, 0.921572367, 0.980447448, 1.043083792, 1.108552825, 1.178131016, 1.254716072, 1.337684338, 1.426147891, 1.522079291, 1.62105614, 1.72827323, 1.850344849, 1.985209079, 2.127659612]
        y = [0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.19, 0.19, 0.19, 0.19, 0.19, 0.18, 0.18, 0.18, 0.18, 0.18, 0.17, 0.17, 0.17, 0.17, 0.16, 0.16, 0.16, 0.15, 0.15, 0.15, 0.15, 0.14, 0.14, 0.14, 0.13, 0.13, 0.13, 0.12, 0.12, 0.12, 0.11, 0.11, 0.11, 0.1, 0.1, 0.1, 0.09, 0.09, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.07, 0.07, 0.07, 0.07, 0.07, 0.08, 0.08, 0.08, 0.08, 0.08, 0.09, 0.09, 0.09, 0.09, 0.09, 0.1, 0.1, 0.1, 0.1, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.12]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F5 = y[c.index(min(c))]
        
        x = [0.001977631, 0.002060648, 0.002115787, 0.002170117, 0.002242279, 0.002319279, 0.002396401, 0.002478693, 0.00257191, 0.002674246, 0.002774812, 0.002861058, 0.002946882, 0.003054486, 0.003179357, 0.003316295, 0.003462772, 0.003619523, 0.00377542, 0.003929769, 0.004090429, 0.004275585, 0.004487942, 0.004710846, 0.004939639, 0.005174091, 0.005431075, 0.005724837, 0.006040808, 0.006374219, 0.006726043, 0.007097262, 0.007512612, 0.007952256, 0.008444187, 0.008994827, 0.009611638, 0.010281434, 0.011032367, 0.011800872, 0.012308922, 0.012413032, 0.013277093, 0.014306814, 0.015448654, 0.01659363, 0.017673507, 0.018704838, 0.019671588, 0.020536411, 0.021371606, 0.022240768, 0.023023842, 0.023659691, 0.024287623, 0.024932221, 0.025620774, 0.026383652, 0.027140684, 0.027743711, 0.028241074, 0.028929534, 0.029759764, 0.030517225, 0.031195274, 0.031955484, 0.032768776, 0.033496963, 0.03420528, 0.034891856, 0.035554621, 0.036229854, 0.037073678, 0.03777713, 0.038859456, 0.039306597, 0.040392262, 0.041420484, 0.04247481, 0.0435559, 0.04461748, 0.045656812, 0.046671241, 0.047708368, 0.0488714, 0.05011555, 0.051499419, 0.052865694, 0.054154179, 0.055357685, 0.056231768, 0.057239837, 0.059255684, 0.059939819, 0.061079895, 0.062241655, 0.062827964, 0.063421701, 0.064357754, 0.065442522, 0.066826238, 0.068167477, 0.069462422, 0.070484572, 0.071446697, 0.072727646, 0.074031685, 0.075597136, 0.07711454, 0.078167687, 0.079402332, 0.08074122, 0.081929885, 0.083311254, 0.08507307, 0.086871999, 0.088708672, 0.090679803, 0.092597445, 0.094854464, 0.097884678, 0.101972575, 0.107582435, 0.114706344, 0.123082597, 0.131936084, 0.140982989, 0.150176648, 0.159299573, 0.168622185, 0.178490081, 0.189133959, 0.200622456, 0.212362322, 0.22431794, 0.237695063, 0.252664221, 0.268857813, 0.286991963, 0.306669572, 0.327696923, 0.349800872, 0.373784975, 0.399407546, 0.426333603, 0.455073359, 0.487288873, 0.522334943, 0.561071194, 0.603943164, 0.650094277, 0.699774425, 0.754838548, 0.813376924, 0.875519038, 0.941407141, 1.014388668, 1.094191012, 1.180273407, 1.27043162, 1.36602788, 1.468819932, 1.579339058, 1.698176864, 1.827905616, 1.969661261]
        y = [0.86, 0.83, 0.8, 0.77, 0.74, 0.71, 0.68, 0.65, 0.62, 0.59, 0.57, 0.54, 0.51, 0.48, 0.45, 0.42, 0.4, 0.37, 0.34, 0.31, 0.29, 0.26, 0.23, 0.21, 0.18, 0.16, 0.13, 0.11, 0.09, 0.06, 0.04, 0.02, -0.01, -0.03, -0.05, -0.06, -0.08, -0.1, -0.1, -0.11, -0.13, -0.13, -0.13, -0.13, -0.14, -0.13, -0.11, -0.09, -0.07, -0.04, -0.01, 0.02, 0.05, 0.07, 0.1, 0.13, 0.16, 0.19, 0.22, 0.25, 0.28, 0.31, 0.34, 0.37, 0.4, 0.43, 0.46, 0.49, 0.52, 0.55, 0.58, 0.61, 0.64, 0.68, 0.72, 0.76, 0.79, 0.81, 0.84, 0.87, 0.9, 0.93, 0.97, 1, 1.02, 1.05, 1.08, 1.11, 1.14, 1.17, 1.2, 1.23, 1.26, 1.28, 1.31, 1.33, 1.36, 1.37, 1.39, 1.43, 1.46, 1.49, 1.52, 1.55, 1.58, 1.61, 1.64, 1.67, 1.7, 1.73, 1.76, 1.79, 1.82, 1.85, 1.88, 1.91, 1.94, 1.97, 2, 2.03, 2.06, 2.09, 2.11, 2.13, 2.12, 2.11, 2.09, 2.07, 2.05, 2.03, 2.01, 1.99, 1.97, 1.95, 1.93, 1.91, 1.89, 1.87, 1.85, 1.84, 1.82, 1.8, 1.79, 1.78, 1.77, 1.76, 1.75, 1.74, 1.74, 1.74, 1.73, 1.73, 1.72, 1.72, 1.72, 1.72, 1.73, 1.73, 1.72, 1.73, 1.73, 1.74, 1.75, 1.75, 1.76, 1.75]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F6 = y[c.index(min(c))]
        
        x = [0.002231024, 0.002368878, 0.002528443, 0.00270725, 0.00289563, 0.003087401, 0.003291889, 0.003517286, 0.003746325, 0.00398194, 0.004250172, 0.004541234, 0.004847172, 0.005168295, 0.005516486, 0.005906686, 0.006324476, 0.006736378, 0.007160067, 0.007626402, 0.008140196, 0.008688605, 0.009254537, 0.009867708, 0.010532501, 0.011253881, 0.011986921, 0.012727587, 0.013542425, 0.014439674, 0.015428708, 0.016485434, 0.017596066, 0.018742184, 0.019921175, 0.021174331, 0.022529907, 0.024022655, 0.02556058, 0.027111455, 0.028756384, 0.030597409, 0.03259042, 0.034822457, 0.036587266, 0.037999301, 0.039094393, 0.040347387, 0.042661234, 0.045297466, 0.048247989, 0.051444562, 0.0547954, 0.05818109, 0.061711199, 0.06559298, 0.069718934, 0.074104538, 0.078848443, 0.083984098, 0.089548435, 0.095481436, 0.101700773, 0.108211972, 0.115140039, 0.122639871, 0.131039996, 0.140014819, 0.149760646, 0.160521801, 0.17151608, 0.18307178, 0.195816161, 0.209446078, 0.22332074, 0.237865596, 0.254423196, 0.272990339, 0.292604866, 0.313628213, 0.336163127, 0.360317226, 0.385392488, 0.411777312, 0.445562123, 0.476079813, 0.512429107, 0.550393301, 0.588072591, 0.62635492, 0.668531665, 0.715805683, 0.768036052, 0.824932121, 0.886970297, 0.953683019, 1.025416717, 1.103696387, 1.271941718, 1.438360671, 1.591027397, 1.705281832, 1.804832481, 1.965160372, 2.11959218, 2.307880981, 2.512895958, 2.68486238, 2.898886955]
        y = [0.13, 0.13, 0.13, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.11, 0.11, 0.11, 0.11, 0.11, 0.1, 0.1, 0.1, 0.1, 0.1, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F7 = y[c.index(min(c))]
        F6_i = 0.029*N_d+F6
        
        #Находим безразмерный показатель скорости проскализывания S для пробкового потока
        S = (1+F5)*((N_gv**0.982+F6_i)/(1+F7*N_lv))
        #Находим скорость скольжения Vs
        vs = S/(ro_l/(9.8*sigm))**0.25
        #Находим объемное содержание жидкости для пробкового потока
        H_l = (vs-(v_sg+v_sl)+math.sqrt((v_sg+v_sl-vs)**2+4*vs*v_sl))/(2*vs)
        #Расчитываем градиент давления на графитацию
        grad_grav = (ro_l*H_l+ro_g*(1-H_l))*9.8
        
        return grad_grav
        
    elif flow == 'Эмульсионный поток':
        vs = 0
        S = 0
        H_l = q_l/(q_l+q_g)
        #Расчитываем градиент давления на графитацию
        grad_grav = (ro_l*H_l+ro_g*(1-H_l))*9.8
        
        return grad_grav
        
    elif flow == 'Переходный потока':
        x = [0.001855336, 0.00199908, 0.002144907, 0.002298958, 0.002469265, 0.002660548, 0.00286964, 0.003091905, 0.003324439, 0.003566998, 0.003835286, 0.004128044, 0.004433807, 0.004752274, 0.005098978, 0.00548245, 0.005882443, 0.006311648, 0.006786363, 0.007304464, 0.007853888, 0.008426871, 0.009032205, 0.009691229, 0.010387386, 0.01109853, 0.011833542, 0.012657044, 0.013566268, 0.014525559, 0.015552831, 0.016670259, 0.017849094, 0.019051266, 0.020334567, 0.021727093, 0.023215091, 0.024779064, 0.026476162, 0.028289448, 0.030290459, 0.032467052, 0.034654428, 0.036757184, 0.038824265, 0.041050633, 0.043541498, 0.046231979, 0.048883142, 0.051524079, 0.054364784, 0.057301417, 0.059954194, 0.062532661, 0.065085518, 0.067529934, 0.070066485, 0.072469639, 0.074798108, 0.07663567, 0.077209552, 0.078032696, 0.081302302, 0.081397016, 0.084365753, 0.085714306, 0.086537285, 0.087368717, 0.088486894, 0.090091433, 0.091917875, 0.094077416, 0.096794564, 0.100009466, 0.103657205, 0.107663488, 0.112295041, 0.117989153, 0.125148086, 0.133299809, 0.142130868, 0.15186314, 0.162942118, 0.175009272, 0.187967129, 0.201671755, 0.215919666, 0.230443012, 0.24568225, 0.260828273, 0.27661593, 0.293050204, 0.309808179, 0.32717999, 0.345526978, 0.364902793, 0.384959834, 0.406118679, 0.429342435, 0.452940715, 0.475829022, 0.499348998, 0.526795934, 0.559271406, 0.594374011, 0.628365066, 0.660813023, 0.694936551, 0.733904745, 0.776689692, 0.821967606, 0.868972911, 0.921572367, 0.980447448, 1.043083792, 1.108552825, 1.178131016, 1.254716072, 1.337684338, 1.426147891, 1.522079291, 1.62105614, 1.72827323, 1.850344849, 1.985209079, 2.127659612]
        y = [0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.19, 0.19, 0.19, 0.19, 0.19, 0.18, 0.18, 0.18, 0.18, 0.18, 0.17, 0.17, 0.17, 0.17, 0.16, 0.16, 0.16, 0.15, 0.15, 0.15, 0.15, 0.14, 0.14, 0.14, 0.13, 0.13, 0.13, 0.12, 0.12, 0.12, 0.11, 0.11, 0.11, 0.1, 0.1, 0.1, 0.09, 0.09, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.07, 0.07, 0.07, 0.07, 0.07, 0.08, 0.08, 0.08, 0.08, 0.08, 0.09, 0.09, 0.09, 0.09, 0.09, 0.1, 0.1, 0.1, 0.1, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.12]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F5 = y[c.index(min(c))]
        
        x = [0.001977631, 0.002060648, 0.002115787, 0.002170117, 0.002242279, 0.002319279, 0.002396401, 0.002478693, 0.00257191, 0.002674246, 0.002774812, 0.002861058, 0.002946882, 0.003054486, 0.003179357, 0.003316295, 0.003462772, 0.003619523, 0.00377542, 0.003929769, 0.004090429, 0.004275585, 0.004487942, 0.004710846, 0.004939639, 0.005174091, 0.005431075, 0.005724837, 0.006040808, 0.006374219, 0.006726043, 0.007097262, 0.007512612, 0.007952256, 0.008444187, 0.008994827, 0.009611638, 0.010281434, 0.011032367, 0.011800872, 0.012308922, 0.012413032, 0.013277093, 0.014306814, 0.015448654, 0.01659363, 0.017673507, 0.018704838, 0.019671588, 0.020536411, 0.021371606, 0.022240768, 0.023023842, 0.023659691, 0.024287623, 0.024932221, 0.025620774, 0.026383652, 0.027140684, 0.027743711, 0.028241074, 0.028929534, 0.029759764, 0.030517225, 0.031195274, 0.031955484, 0.032768776, 0.033496963, 0.03420528, 0.034891856, 0.035554621, 0.036229854, 0.037073678, 0.03777713, 0.038859456, 0.039306597, 0.040392262, 0.041420484, 0.04247481, 0.0435559, 0.04461748, 0.045656812, 0.046671241, 0.047708368, 0.0488714, 0.05011555, 0.051499419, 0.052865694, 0.054154179, 0.055357685, 0.056231768, 0.057239837, 0.059255684, 0.059939819, 0.061079895, 0.062241655, 0.062827964, 0.063421701, 0.064357754, 0.065442522, 0.066826238, 0.068167477, 0.069462422, 0.070484572, 0.071446697, 0.072727646, 0.074031685, 0.075597136, 0.07711454, 0.078167687, 0.079402332, 0.08074122, 0.081929885, 0.083311254, 0.08507307, 0.086871999, 0.088708672, 0.090679803, 0.092597445, 0.094854464, 0.097884678, 0.101972575, 0.107582435, 0.114706344, 0.123082597, 0.131936084, 0.140982989, 0.150176648, 0.159299573, 0.168622185, 0.178490081, 0.189133959, 0.200622456, 0.212362322, 0.22431794, 0.237695063, 0.252664221, 0.268857813, 0.286991963, 0.306669572, 0.327696923, 0.349800872, 0.373784975, 0.399407546, 0.426333603, 0.455073359, 0.487288873, 0.522334943, 0.561071194, 0.603943164, 0.650094277, 0.699774425, 0.754838548, 0.813376924, 0.875519038, 0.941407141, 1.014388668, 1.094191012, 1.180273407, 1.27043162, 1.36602788, 1.468819932, 1.579339058, 1.698176864, 1.827905616, 1.969661261]
        y = [0.86, 0.83, 0.8, 0.77, 0.74, 0.71, 0.68, 0.65, 0.62, 0.59, 0.57, 0.54, 0.51, 0.48, 0.45, 0.42, 0.4, 0.37, 0.34, 0.31, 0.29, 0.26, 0.23, 0.21, 0.18, 0.16, 0.13, 0.11, 0.09, 0.06, 0.04, 0.02, -0.01, -0.03, -0.05, -0.06, -0.08, -0.1, -0.1, -0.11, -0.13, -0.13, -0.13, -0.13, -0.14, -0.13, -0.11, -0.09, -0.07, -0.04, -0.01, 0.02, 0.05, 0.07, 0.1, 0.13, 0.16, 0.19, 0.22, 0.25, 0.28, 0.31, 0.34, 0.37, 0.4, 0.43, 0.46, 0.49, 0.52, 0.55, 0.58, 0.61, 0.64, 0.68, 0.72, 0.76, 0.79, 0.81, 0.84, 0.87, 0.9, 0.93, 0.97, 1, 1.02, 1.05, 1.08, 1.11, 1.14, 1.17, 1.2, 1.23, 1.26, 1.28, 1.31, 1.33, 1.36, 1.37, 1.39, 1.43, 1.46, 1.49, 1.52, 1.55, 1.58, 1.61, 1.64, 1.67, 1.7, 1.73, 1.76, 1.79, 1.82, 1.85, 1.88, 1.91, 1.94, 1.97, 2, 2.03, 2.06, 2.09, 2.11, 2.13, 2.12, 2.11, 2.09, 2.07, 2.05, 2.03, 2.01, 1.99, 1.97, 1.95, 1.93, 1.91, 1.89, 1.87, 1.85, 1.84, 1.82, 1.8, 1.79, 1.78, 1.77, 1.76, 1.75, 1.74, 1.74, 1.74, 1.73, 1.73, 1.72, 1.72, 1.72, 1.72, 1.73, 1.73, 1.72, 1.73, 1.73, 1.74, 1.75, 1.75, 1.76, 1.75]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F6 = y[c.index(min(c))]
        
        x = [0.002231024, 0.002368878, 0.002528443, 0.00270725, 0.00289563, 0.003087401, 0.003291889, 0.003517286, 0.003746325, 0.00398194, 0.004250172, 0.004541234, 0.004847172, 0.005168295, 0.005516486, 0.005906686, 0.006324476, 0.006736378, 0.007160067, 0.007626402, 0.008140196, 0.008688605, 0.009254537, 0.009867708, 0.010532501, 0.011253881, 0.011986921, 0.012727587, 0.013542425, 0.014439674, 0.015428708, 0.016485434, 0.017596066, 0.018742184, 0.019921175, 0.021174331, 0.022529907, 0.024022655, 0.02556058, 0.027111455, 0.028756384, 0.030597409, 0.03259042, 0.034822457, 0.036587266, 0.037999301, 0.039094393, 0.040347387, 0.042661234, 0.045297466, 0.048247989, 0.051444562, 0.0547954, 0.05818109, 0.061711199, 0.06559298, 0.069718934, 0.074104538, 0.078848443, 0.083984098, 0.089548435, 0.095481436, 0.101700773, 0.108211972, 0.115140039, 0.122639871, 0.131039996, 0.140014819, 0.149760646, 0.160521801, 0.17151608, 0.18307178, 0.195816161, 0.209446078, 0.22332074, 0.237865596, 0.254423196, 0.272990339, 0.292604866, 0.313628213, 0.336163127, 0.360317226, 0.385392488, 0.411777312, 0.445562123, 0.476079813, 0.512429107, 0.550393301, 0.588072591, 0.62635492, 0.668531665, 0.715805683, 0.768036052, 0.824932121, 0.886970297, 0.953683019, 1.025416717, 1.103696387, 1.271941718, 1.438360671, 1.591027397, 1.705281832, 1.804832481, 1.965160372, 2.11959218, 2.307880981, 2.512895958, 2.68486238, 2.898886955]
        y = [0.13, 0.13, 0.13, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.11, 0.11, 0.11, 0.11, 0.11, 0.1, 0.1, 0.1, 0.1, 0.1, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-N_l))
        F7 = y[c.index(min(c))]
        F6_i = 0.029*N_d+F6
        
        #Находим безразмерный показатель скорости проскализывания S для пробкового потока
        S = (1+F5)*((N_gv**0.982+F6_i)/(1+F7*N_lv))
        #Находим скорость скольжения Vs
        vs = S/(ro_l/(9.8*sigm))**0.25
        #Находим объемное содержание жидкости для пробкового потока
        H_l1 = (vs-(v_sg+v_sl)+math.sqrt((v_sg+v_sl-vs)**2+4*vs*v_sl))/(2*vs)
        #Находим объемное содержание жидкости для эмульсионного потока потока
        vs = 0
        S = 0
        H_l2 = q_l/(q_l+q_g)
        #Расчитываем градиентs давления на графитацию для пробкового и для эмульсионного потока
        grad_grav1 = (ro_l*H_l1+ro_g*(1-H_l1))*9.8
        grad_grav2 = (ro_l*H_l2+ro_g*(1-H_l2))*9.8
        return grad_grav1, grad_grav2
        
    """if flow != 'Переходный поток':
        #Расчитываем градиент давления на графитацию
        grad_grav = (ro_l*H_l+ro_g*(1-H_l))*9.8
        
        return grad_grav
    
    else:
        #Расчитываем градиентs давления на графитацию для пробкового и для эмульсионного потока
        grad_grav1 = (ro_l*H_l1+ro_g*(1-H_l1))*9.8
        grad_grav2 = (ro_l*H_l2+ro_g*(1-H_l2))*9.8
        return grad_grav1, grad_grav2"""
        


# In[4]:


def calc_grad_fric(N_gv: float, N_d: float, N_lv: float, N_l: float, ro_l: float, ro_g: float, v_sg: float, v_sl: float, sigm: float, q_l: float, q_g: float, mu_o: float, mu_g: float, d: float, eps: float, surch: float, p_wf: float, p_wh: float, flow: str):
    """
    Функция, вычисляющая градиент давления на трение
    
    return:
    grad_grav - в для любого потока кроме переходного
    
    или
    
    grad_grav1 - градиент давления на трение пробкового режима для расчета переходного потока 
    grad_grav1 - градиент давления на трение эмульсионного режима для расчета переходного потока
    
    """
    
    
    if flow == 'Пузырьковый поток':
        #Расчитываем число Рейнольдса
        Nre_l = ro_l*v_sl*d/mu_o
        fi = (-2*math.log10(2*(eps/d)/3.7-5.02/Nre_l*math.log10(2*(eps/d)/3.7+13/Nre_l)))**(-2)
        f1 = 0
        i = 0
        while i!=10:
            f1 = (1.74-2*math.log10((2*eps)/d+18.7/(Nre_l*math.sqrt(fi))))**(-2)
            fi = f1
            i+=1

        f1_i = f1*v_sg*N_d**(2/3)/(4*v_sl)

        #Рассчитываем коэффициент f2
        x = [0.000997467, 0.001093972, 0.001326992, 0.001665219, 0.002054489, 0.002621799, 0.003207641, 0.003958188, 0.004966167, 0.006025062, 0.007309737, 0.009643296, 0.013379082, 0.017359448, 0.022335688, 0.03072386, 0.038540957, 0.046359457, 0.057186393, 0.069367289, 0.083439283, 0.095317781, 0.109121207, 0.102036872, 0.116704404, 0.124812086, 0.133483025, 0.14275635, 0.152670858, 0.163267402, 0.174602921, 0.186732926, 0.199523409, 0.213388957, 0.228218068, 0.244063057, 0.26073349, 0.278260595, 0.29722523, 0.317469683, 0.338104797, 0.359038962, 0.38161749, 0.406002567, 0.430695626, 0.454691666, 0.479120308, 0.505844664, 0.535588471, 0.567058536, 0.598651983, 0.629588811, 0.662111133, 0.696327371, 0.732341114, 0.770202066, 0.811549268, 0.855931321, 0.901880776, 0.947584369, 0.995604032, 1.050051683, 1.109633891, 1.171527013, 1.235669698, 1.305784275, 1.381192748, 1.462348763, 1.545263781, 1.6281865, 1.714028019, 1.809596819, 1.914215111, 2.026730952, 2.137697205, 2.250266195, 2.371115961, 2.505758462, 2.650517938, 2.795469616, 2.94834842, 3.121649685, 3.308552952, 3.506646722, 3.71298706, 3.923905451, 4.134720138, 4.356860998, 4.604170829, 4.874799844, 5.16133619, 5.454310692, 5.763915396, 6.096778999, 6.44886533, 6.801813352, 7.160419685, 7.567020132, 8.01992169, 8.507863165, 9.025491574, 9.556192988, 10.10805897, 10.69243658, 11.332174, 12.00970698, 12.71562674, 13.47614376, 14.30996293, 15.21016364, 16.15191921, 17.16799236, 18.24798391, 19.41401664, 20.65455801, 21.97480861, 23.379918, 24.87437509, 26.4659468, 28.18901782, 29.99747476, 31.92195265, 34.03265064, 36.01602722, 39.81929214, 42.57028585, 47.07414915, 52.9359536, 59.5276863, 66.9161427, 79.13638517, 88.9746498, 99.18180517]
        y = [1.0019, 1.0014, 1.0004, 1.0081, 1.0115, 1.0193, 1.0227, 1.0308, 1.0341, 1.0377, 1.0413, 1.0397, 1.0378, 1.041, 1.0443, 1.0378, 1.0365, 1.0355, 1.0343, 1.0332, 1.0321, 1.0237, 1.0224, 1.0238, 1.0226, 1.0222, 1.0218, 1.0215, 1.0206, 1.0187, 1.0173, 1.0169, 1.017, 1.0172, 1.0173, 1.0159, 1.0115, 1.0051, 0.9973, 0.9885, 0.9769, 0.963, 0.9489, 0.9354, 0.9198, 0.901, 0.882, 0.8652, 0.85, 0.8342, 0.8171, 0.7983, 0.7796, 0.7617, 0.745, 0.7282, 0.7122, 0.6969, 0.6816, 0.6656, 0.65, 0.6361, 0.6236, 0.6117, 0.5995, 0.5877, 0.5765, 0.5658, 0.5542, 0.5417, 0.5301, 0.5197, 0.5106, 0.5013, 0.4913, 0.48, 0.4697, 0.461, 0.4524, 0.4427, 0.4332, 0.4253, 0.4187, 0.4121, 0.4053, 0.3979, 0.3896, 0.3814, 0.3741, 0.3673, 0.3607, 0.3538, 0.3471, 0.3404, 0.334, 0.3271, 0.3201, 0.3141, 0.3091, 0.3041, 0.2991, 0.2939, 0.2883, 0.2832, 0.2785, 0.2736, 0.2686, 0.264, 0.26, 0.2563, 0.2527, 0.2491, 0.2456, 0.2421, 0.2386, 0.2354, 0.2323, 0.2291, 0.2263, 0.2242, 0.2223, 0.2205, 0.2185, 0.2171, 0.215, 0.213, 0.2119, 0.2109, 0.2098, 0.2068, 0.2057, 0.2038, 0.2009]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-f1_i))
        f2 = y[c.index(min(c))]
        
        #Расчитываем коэффициент f3
        f3 = 1+f1/4*math.sqrt(v_sg/(50*v_sl))
        
        #Расчитываем коэффициент трения f
        f = f1*f2/f3
        
        grad_fric = f*ro_l*v_sl*(v_sl+v_sg)/(2*d)
        
        return grad_fric
    
    elif flow == 'Пробковый поток':
        #Расчитываем число Рейнольдса
        Nre_l = ro_l*v_sl*d/mu_o
        fi = (-2*math.log10(2*(eps/d)/3.7-5.02/Nre_l*math.log10(2*(eps/d)/3.7+13/Nre_l)))**(-2)
        f1 = 0
        i = 0
        while i!=10:
            f1 = (1.74-2*math.log10((2*eps)/d+18.7/(Nre_l*math.sqrt(fi))))**(-2)
            fi = f1
            i+=1
        f1_i = f1*v_sg*N_d**(2/3)/(4*v_sl)
        
        #Рассчитываем коэффициент f2
        x = [0.000997467, 0.001093972, 0.001326992, 0.001665219, 0.002054489, 0.002621799, 0.003207641, 0.003958188, 0.004966167, 0.006025062, 0.007309737, 0.009643296, 0.013379082, 0.017359448, 0.022335688, 0.03072386, 0.038540957, 0.046359457, 0.057186393, 0.069367289, 0.083439283, 0.095317781, 0.109121207, 0.102036872, 0.116704404, 0.124812086, 0.133483025, 0.14275635, 0.152670858, 0.163267402, 0.174602921, 0.186732926, 0.199523409, 0.213388957, 0.228218068, 0.244063057, 0.26073349, 0.278260595, 0.29722523, 0.317469683, 0.338104797, 0.359038962, 0.38161749, 0.406002567, 0.430695626, 0.454691666, 0.479120308, 0.505844664, 0.535588471, 0.567058536, 0.598651983, 0.629588811, 0.662111133, 0.696327371, 0.732341114, 0.770202066, 0.811549268, 0.855931321, 0.901880776, 0.947584369, 0.995604032, 1.050051683, 1.109633891, 1.171527013, 1.235669698, 1.305784275, 1.381192748, 1.462348763, 1.545263781, 1.6281865, 1.714028019, 1.809596819, 1.914215111, 2.026730952, 2.137697205, 2.250266195, 2.371115961, 2.505758462, 2.650517938, 2.795469616, 2.94834842, 3.121649685, 3.308552952, 3.506646722, 3.71298706, 3.923905451, 4.134720138, 4.356860998, 4.604170829, 4.874799844, 5.16133619, 5.454310692, 5.763915396, 6.096778999, 6.44886533, 6.801813352, 7.160419685, 7.567020132, 8.01992169, 8.507863165, 9.025491574, 9.556192988, 10.10805897, 10.69243658, 11.332174, 12.00970698, 12.71562674, 13.47614376, 14.30996293, 15.21016364, 16.15191921, 17.16799236, 18.24798391, 19.41401664, 20.65455801, 21.97480861, 23.379918, 24.87437509, 26.4659468, 28.18901782, 29.99747476, 31.92195265, 34.03265064, 36.01602722, 39.81929214, 42.57028585, 47.07414915, 52.9359536, 59.5276863, 66.9161427, 79.13638517, 88.9746498, 99.18180517]
        y = [1.0019, 1.0014, 1.0004, 1.0081, 1.0115, 1.0193, 1.0227, 1.0308, 1.0341, 1.0377, 1.0413, 1.0397, 1.0378, 1.041, 1.0443, 1.0378, 1.0365, 1.0355, 1.0343, 1.0332, 1.0321, 1.0237, 1.0224, 1.0238, 1.0226, 1.0222, 1.0218, 1.0215, 1.0206, 1.0187, 1.0173, 1.0169, 1.017, 1.0172, 1.0173, 1.0159, 1.0115, 1.0051, 0.9973, 0.9885, 0.9769, 0.963, 0.9489, 0.9354, 0.9198, 0.901, 0.882, 0.8652, 0.85, 0.8342, 0.8171, 0.7983, 0.7796, 0.7617, 0.745, 0.7282, 0.7122, 0.6969, 0.6816, 0.6656, 0.65, 0.6361, 0.6236, 0.6117, 0.5995, 0.5877, 0.5765, 0.5658, 0.5542, 0.5417, 0.5301, 0.5197, 0.5106, 0.5013, 0.4913, 0.48, 0.4697, 0.461, 0.4524, 0.4427, 0.4332, 0.4253, 0.4187, 0.4121, 0.4053, 0.3979, 0.3896, 0.3814, 0.3741, 0.3673, 0.3607, 0.3538, 0.3471, 0.3404, 0.334, 0.3271, 0.3201, 0.3141, 0.3091, 0.3041, 0.2991, 0.2939, 0.2883, 0.2832, 0.2785, 0.2736, 0.2686, 0.264, 0.26, 0.2563, 0.2527, 0.2491, 0.2456, 0.2421, 0.2386, 0.2354, 0.2323, 0.2291, 0.2263, 0.2242, 0.2223, 0.2205, 0.2185, 0.2171, 0.215, 0.213, 0.2119, 0.2109, 0.2098, 0.2068, 0.2057, 0.2038, 0.2009]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-f1_i))
        f2 = y[c.index(min(c))]
        #Расчитываем коэффициент f3
        f3 = 1+f1/4*math.sqrt(v_sg/(50*v_sl))
        #Расчитываем коэффициент трения f
        f = f1*f2/f3
        grad_fric = f*ro_l*v_sl*(v_sl+v_sg)/(2*d)
        
        return grad_fric
    
    elif flow == 'Эмульсионный поток':
        Nre_g = ro_g*v_sg*d/mu_g
        Nwe = ro_g*v_sg**2*eps/sigm
        N_mu = mu_o**2/(ro_l*sigm*eps)
        if Nwe*N_mu<=0.005:
            c = 0.0749*sigm/(ro_g*v_sg**2*d)
        else:
            c = 0.3713*sigm/(ro_g*v_sg**2*d)*(Nwe*N_mu)**0.302
        #Расчитываем коэффициент трения f
        f = 4*(1/(4*math.log10(0.27*c)**2)+0.067*c**1.73)
        #Расчитываем градиент давления на трение
        grad_fric = f*ro_g*(v_sg*d**2/(d-2*eps)**2)**2/(2*(d-2*eps))
        
        return grad_fric
    
    elif flow == 'Переходный поток':
        #Расчет для пробкового потока
        #Расчитываем число Рейнольдса
        Nre_l = ro_l*v_sl*d/mu_o
        fi = (-2*math.log10(2*(eps/d)/3.7-5.02/Nre_l*math.log10(2*(eps/d)/3.7+13/Nre_l)))**(-2)
        f1 = 0
        i = 0
        while i!=10:
            f1 = (1.74-2*math.log10((2*eps)/d+18.7/(Nre_l*math.sqrt(fi))))**(-2)
            fi = f1
            i+=1
        f1_i = f1*v_sg*N_d**(2/3)/(4*v_sl)
        #Рассчитываем коэффициент f2
        x = [0.000997467, 0.001093972, 0.001326992, 0.001665219, 0.002054489, 0.002621799, 0.003207641, 0.003958188, 0.004966167, 0.006025062, 0.007309737, 0.009643296, 0.013379082, 0.017359448, 0.022335688, 0.03072386, 0.038540957, 0.046359457, 0.057186393, 0.069367289, 0.083439283, 0.095317781, 0.109121207, 0.102036872, 0.116704404, 0.124812086, 0.133483025, 0.14275635, 0.152670858, 0.163267402, 0.174602921, 0.186732926, 0.199523409, 0.213388957, 0.228218068, 0.244063057, 0.26073349, 0.278260595, 0.29722523, 0.317469683, 0.338104797, 0.359038962, 0.38161749, 0.406002567, 0.430695626, 0.454691666, 0.479120308, 0.505844664, 0.535588471, 0.567058536, 0.598651983, 0.629588811, 0.662111133, 0.696327371, 0.732341114, 0.770202066, 0.811549268, 0.855931321, 0.901880776, 0.947584369, 0.995604032, 1.050051683, 1.109633891, 1.171527013, 1.235669698, 1.305784275, 1.381192748, 1.462348763, 1.545263781, 1.6281865, 1.714028019, 1.809596819, 1.914215111, 2.026730952, 2.137697205, 2.250266195, 2.371115961, 2.505758462, 2.650517938, 2.795469616, 2.94834842, 3.121649685, 3.308552952, 3.506646722, 3.71298706, 3.923905451, 4.134720138, 4.356860998, 4.604170829, 4.874799844, 5.16133619, 5.454310692, 5.763915396, 6.096778999, 6.44886533, 6.801813352, 7.160419685, 7.567020132, 8.01992169, 8.507863165, 9.025491574, 9.556192988, 10.10805897, 10.69243658, 11.332174, 12.00970698, 12.71562674, 13.47614376, 14.30996293, 15.21016364, 16.15191921, 17.16799236, 18.24798391, 19.41401664, 20.65455801, 21.97480861, 23.379918, 24.87437509, 26.4659468, 28.18901782, 29.99747476, 31.92195265, 34.03265064, 36.01602722, 39.81929214, 42.57028585, 47.07414915, 52.9359536, 59.5276863, 66.9161427, 79.13638517, 88.9746498, 99.18180517]
        y = [1.0019, 1.0014, 1.0004, 1.0081, 1.0115, 1.0193, 1.0227, 1.0308, 1.0341, 1.0377, 1.0413, 1.0397, 1.0378, 1.041, 1.0443, 1.0378, 1.0365, 1.0355, 1.0343, 1.0332, 1.0321, 1.0237, 1.0224, 1.0238, 1.0226, 1.0222, 1.0218, 1.0215, 1.0206, 1.0187, 1.0173, 1.0169, 1.017, 1.0172, 1.0173, 1.0159, 1.0115, 1.0051, 0.9973, 0.9885, 0.9769, 0.963, 0.9489, 0.9354, 0.9198, 0.901, 0.882, 0.8652, 0.85, 0.8342, 0.8171, 0.7983, 0.7796, 0.7617, 0.745, 0.7282, 0.7122, 0.6969, 0.6816, 0.6656, 0.65, 0.6361, 0.6236, 0.6117, 0.5995, 0.5877, 0.5765, 0.5658, 0.5542, 0.5417, 0.5301, 0.5197, 0.5106, 0.5013, 0.4913, 0.48, 0.4697, 0.461, 0.4524, 0.4427, 0.4332, 0.4253, 0.4187, 0.4121, 0.4053, 0.3979, 0.3896, 0.3814, 0.3741, 0.3673, 0.3607, 0.3538, 0.3471, 0.3404, 0.334, 0.3271, 0.3201, 0.3141, 0.3091, 0.3041, 0.2991, 0.2939, 0.2883, 0.2832, 0.2785, 0.2736, 0.2686, 0.264, 0.26, 0.2563, 0.2527, 0.2491, 0.2456, 0.2421, 0.2386, 0.2354, 0.2323, 0.2291, 0.2263, 0.2242, 0.2223, 0.2205, 0.2185, 0.2171, 0.215, 0.213, 0.2119, 0.2109, 0.2098, 0.2068, 0.2057, 0.2038, 0.2009]
        c = []
        for i in range(len(x)):
            c.append(abs(x[i]-f1_i))
        f2 = y[c.index(min(c))]
        #Расчитываем коэффициент f3
        f3 = 1+f1/4*math.sqrt(v_sg/(50*v_sl))
        #Расчитываем коэффициент трения f
        f = f1*f2/f3
        grad_fric1 = f*ro_l*v_sl*(v_sl+v_sg)/(2*d)
        
        #Расчет для эмульсионного потока
        Nre_g = ro_g*v_sg*d/mu_g
        Nwe = ro_g*v_sg**2*eps/sigm
        N_mu = mu_o**2/(ro_l*sigm*eps)
        if Nwe*N_mu<=0.005:
            c = 0.0749*sigm/(ro_g*v_sg**2*d)
        else:
            c = 0.3713*sigm/(ro_g*v_sg**2*d)*(Nwe*N_mu)**0.302
        #Расчитываем коэффициент трения f
        f = 4*(1/(4*math.log10(0.27*c)**2)+0.067*c**1.73)
        #Расчитываем градиент давления на трение
        grad_fric2 = f*ro_g*(v_sg*d**2/(d-2*eps)**2)**2/(2*(d-2*eps))
        
        return grad_fric1, grad_fric2


# In[5]:


def calc_grad(N_gv: float, N_d: float, N_lv: float, N_l: float, ro_l: float, ro_g: float, v_sg: float, v_sl: float, sigm: float, q_l: float, q_g: float, mu_o: float, mu_g: float, d: float, eps: float, surch: float, p_wf: float, p_wh: float, flow: str, l: float):
    """
    Функция, вычисляющая общий градиент давления

    return:
    dp_dl - общий градиент давления
    """
    
    if flow == 'Пузырьковый поток':
        grad_fric = calc_grad_fric(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        grad_grav = calc_grad_grav(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        dp_dl = grad_fric + grad_grav
        return dp_dl*10**-6
        
    elif flow == 'Пробковый поток':
        grad_fric = calc_grad_fric(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        grad_grav = calc_grad_grav(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        dp_dl = grad_fric + grad_grav
        return dp_dl*10**-6
        
    elif flow == 'Эмульсионный поток':
        grad_fric = calc_grad_fric(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        grad_grav = calc_grad_grav(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        dp_dl = grad_fric + grad_grav
        #if surch == 0:
            #if l == 0:
               # l = 0.000001
            #p = p_wf*10**6-dp_dl1*l
            #print("p_wf", p_wf)
       # else:
          #  if l ==0:
           #     l = 0.000001
            #p = dp_dl1*l+p_wh*10**6
       # dp_dl = (grad_fric + grad_grav)/(1-((v_sg+v_sl)*v_sg*(grad_grav/9.8))/p)
        return dp_dl*10**-6
                                  
    else:
        grad_fric1, grad_fric2 = calc_grad_fric(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        grad_grav1, grad_grav2 = calc_grad_grav(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow)
        A = ((75+84*(N_lv**0.75))-N_gv)/((75+84*(N_lv**0.75))-(50+36*N_lv))
        
        dp_dl_B = grad_fric1 + grad_grav1
        dp_dl_M = grad_fric2 + grad_grav2
        #if surch == 0:
            #if l == 0:
                #l = 1
            #p = p_wf*10**6-dp_dl1*l
        #lse:
            #if l == 0:
                #l = 1
            #p = dp_dl1*l+p_wh*10**6
        #dp_dl_M = (grad_fric2 + grad_grav2)/(1-((v_sg+v_sl)*v_sg*(grad_grav2/9.8))/p)
        
        dp_dl = A*dp_dl_B+(1-A)*dp_dl_M
                                             
        return dp_dl*10**-6


# In[6]:


def calc_pressure(N_gv: float, N_d: float, N_lv: float, N_l: float, ro_l: float, ro_g: float, v_sg: float, v_sl: float, sigm: float, q_l: float, q_g: float, mu_o: float, mu_g: float, d: float, eps: float, surch: float, p_wf: float, p_wh: float, flow: float, l: float):
    """
    Функция, определяющая давление в скважине путем интегрирования градиента

    return:
    p - давление в МПа
    p_wf - забойное давление в МПа
    p_wh - устьевое давление в МПа
    """
    p = l*calc_grad(N_gv, N_d, N_lv, N_l, ro_l, ro_g, v_sg, v_sl, sigm, q_l, q_g, mu_o, mu_g, d, eps, surch, p_wf, p_wh, flow,l)
    if surch == 1:
        p_wf = p_wh+p
        return p_wf
    elif surch == 0:
        p_wh = p_wf-p
        return p_wh


